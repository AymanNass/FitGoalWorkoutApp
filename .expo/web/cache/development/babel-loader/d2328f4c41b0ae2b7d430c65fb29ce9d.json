{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/macuser/Desktop/FitGoalW/src/screens/LoadingScreen.js\",\n    _templateObject;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport styled from 'styled-components';\nimport Text from \"../components/Text\";\nimport LottieView from 'lottie-react-native';\nimport { UserContext } from \"../context/UserContext\";\nimport { FirebaseContext } from \"../context/FirebaseContext\";\nexport default LoadingScreen = function LoadingScreen() {\n  var _useContext = useContext(UserContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      _ = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var firebase = useContext(FirebaseContext);\n  useEffect(function () {\n    setTimeout(function _callee() {\n      var user, userInfo;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              user = firebase.getCurrentUser();\n\n              if (!user) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(firebase.getUserInfo(user.uid));\n\n            case 4:\n              userInfo = _context.sent;\n              setUser({\n                isLoggedIn: true,\n                email: userInfo.email,\n                uid: user.uid,\n                username: userInfo.username\n              });\n              _context.next = 9;\n              break;\n\n            case 8:\n              setUser(function (state) {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                  isLoggedIn: false\n                });\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 1500);\n  }, []);\n  return React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    title: true,\n    semi: true,\n    center: true,\n    color: \"#FFFFFF\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"FitGoal\"));\n};\nvar Container = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n    flex: 1;\\n    align-items: center;\\n    justify-content: center;\\n    background-color: #222222;\\n\"])));","map":{"version":3,"sources":["/Users/macuser/Desktop/FitGoalW/src/screens/LoadingScreen.js"],"names":["React","useContext","useEffect","styled","Text","LottieView","UserContext","FirebaseContext","LoadingScreen","_","setUser","firebase","setTimeout","user","getCurrentUser","getUserInfo","uid","userInfo","isLoggedIn","email","username","state","Container","View"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA4C,OAA5C;;;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,SAAQC,WAAR;AACA,SAASC,eAAT;AAEA,eAAeC,aAAa,GAAG,yBAAM;AACjC,oBAAqBP,UAAU,CAACK,WAAD,CAA/B;AAAA;AAAA,MAAOG,CAAP;AAAA,MAAUC,OAAV;;AACA,MAAMC,QAAQ,GAAGV,UAAU,CAACM,eAAD,CAA3B;AAEAL,EAAAA,SAAS,CAAC,YAAM;AAERU,IAAAA,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,cAAAA,IAFC,GAEMF,QAAQ,CAACG,cAAT,EAFN;;AAAA,mBAGJD,IAHI;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAIoBF,QAAQ,CAACI,WAAT,CAAqBF,IAAI,CAACG,GAA1B,CAJpB;;AAAA;AAIGC,cAAAA,QAJH;AAKHP,cAAAA,OAAO,CAAC;AACJQ,gBAAAA,UAAU,EAAE,IADR;AAEJC,gBAAAA,KAAK,EAAEF,QAAQ,CAACE,KAFZ;AAGJH,gBAAAA,GAAG,EAAEH,IAAI,CAACG,GAHN;AAIJI,gBAAAA,QAAQ,EAAEH,QAAQ,CAACG;AAJf,eAAD,CAAP;AALG;AAAA;;AAAA;AAaPV,cAAAA,OAAO,CAAC,UAACW,KAAD;AAAA,uDAAiBA,KAAjB;AAAwBH,kBAAAA,UAAU,EAAE;AAApC;AAAA,eAAD,CAAP;;AAbO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAeP,IAfO,CAAV;AAgBH,GAlBI,EAkBF,EAlBE,CAAT;AAoBA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,MAAX;AAAY,IAAA,IAAI,MAAhB;AAAiB,IAAA,MAAM,MAAvB;AAAwB,IAAA,KAAK,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CADJ;AAMH,CA9BD;AAgCA,IAAMI,SAAS,GAAGnB,MAAM,CAACoB,IAAV,kLAAf","sourcesContent":["import React, { useContext, useEffect }from 'react'\nimport { View, StyleSheet} from 'react-native'\nimport styled from 'styled-components'\nimport Text from \"../components/Text\"\nimport LottieView from 'lottie-react-native'\n\nimport {UserContext} from '../context/UserContext'\nimport { FirebaseContext } from '../context/FirebaseContext'\n\nexport default LoadingScreen = () => {\n    const [_, setUser] = useContext(UserContext);\n    const firebase = useContext(FirebaseContext);\n\n    useEffect(() => {\n       \n            setTimeout(async () => {\n\n                const user = firebase.getCurrentUser()\n                if(user) {\n                    const userInfo = await firebase.getUserInfo(user.uid)\n                    setUser({\n                        isLoggedIn: true,\n                        email: userInfo.email,\n                        uid: user.uid,\n                        username: userInfo.username,\n\n                    })\n                } else{\n                setUser((state) => ({ ...state, isLoggedIn: false}));\n                }\n            }, 1500);\n        }, []);\n         \n    return (\n        <Container>\n            <Text title semi center color=\"#FFFFFF\">FitGoal</Text>\n            \n        </Container>\n    )\n}\n\nconst Container = styled.View`\n    flex: 1;\n    align-items: center;\n    justify-content: center;\n    background-color: #222222;\n`"]},"metadata":{},"sourceType":"module"}